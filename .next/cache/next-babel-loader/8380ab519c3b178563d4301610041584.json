{"ast":null,"code":"import \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/row/style\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/col/style\";\nimport _Col from \"antd/lib/col\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React from 'react';\n\nvar Zero = function Zero() {\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      s = _React$useState2[0],\n      sets = _React$useState2[1];\n\n  var _React$useState3 = React.useState(100),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      e = _React$useState4[0],\n      sete = _React$useState4[1];\n\n  var _React$useState5 = React.useState(),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      r = _React$useState6[0],\n      setr = _React$useState6[1];\n\n  var setS = function setS(e) {\n    sets(Number(e.target.value));\n    calculate();\n  };\n\n  var setE = function setE(e) {\n    sete(Number(e.target.value));\n    calculate();\n  };\n\n  var calculate = function calculate() {\n    setr(e - s);\n  };\n\n  var click = function click() {\n    calculate();\n  };\n\n  return __jsx(\"div\", {\n    className: \"toolbox\"\n  }, __jsx(\"div\", {\n    className: \"toolbox-heading\"\n  }, \"0-X % Conversion\"), __jsx(\"hr\", {\n    className: \"hr\"\n  }), __jsx(\"div\", {\n    className: \"toolbox-calc\"\n  }, __jsx(\"div\", {\n    className: \"heading\"\n  }, \"Calculation\"), __jsx(_Row, {\n    className: \"row\"\n  }, __jsx(_Col, {\n    span: 12\n  }, \"Start Value\"), __jsx(_Col, {\n    span: 12\n  }, __jsx(_Input, {\n    className: \"input box\",\n    style: {\n      border: \"1px solid gray\"\n    },\n    type: \"text\",\n    value: s,\n    onChange: function onChange(e) {\n      return setS(e);\n    }\n  }))), __jsx(_Row, {\n    className: \"row\"\n  }, __jsx(_Col, {\n    span: 12\n  }, \"End value\"), __jsx(_Col, {\n    span: 12\n  }, __jsx(_Input, {\n    className: \"input box\",\n    style: {\n      border: \"1px solid gray\"\n    },\n    type: \"text\",\n    value: e,\n    onChange: function onChange(e) {\n      return setE(e);\n    }\n  }))), __jsx(_Row, {\n    className: \"toolbox-descp\"\n  }, __jsx(_Col, {\n    style: {\n      textAlign: \"center\"\n    }\n  }, __jsx(_Button, {\n    className: \"calculate-button\",\n    onClick: function onClick() {\n      return click();\n    }\n  }, \"Calculate\")))), r !== undefined && __jsx(\"div\", {\n    className: \"toolbox-calc\"\n  }, __jsx(\"hr\", {\n    className: \"hr\"\n  }), __jsx(\"div\", {\n    className: \"heading\"\n  }, \"RESULT\"), __jsx(_Row, null, __jsx(_Col, {\n    span: 12,\n    className: \"result-head\"\n  }, \" 0%\"), __jsx(_Col, null, \" \", s, \" \")), __jsx(_Row, null, __jsx(_Col, {\n    span: 12,\n    className: \"result-head\"\n  }, \" 25%\"), __jsx(_Col, null, \" \", r / 4 + Number(s), \" \")), __jsx(_Row, null, __jsx(_Col, {\n    span: 12,\n    className: \"result-head\"\n  }, \" 50%\"), __jsx(_Col, null, \" \", r / 2 + Number(s), \" \")), __jsx(_Row, null, __jsx(_Col, {\n    span: 12,\n    className: \"result-head\"\n  }, \" 75%\"), __jsx(_Col, null, \" \", r * 3 / 4 + Number(s), \"  \")), __jsx(_Row, null, __jsx(_Col, {\n    span: 12,\n    className: \"result-head\"\n  }, \" 100%\"), __jsx(_Col, null, \" \", e, \" \"))), __jsx(\"hr\", {\n    className: \"hr\"\n  }), __jsx(\"div\", {\n    className: \"toolbox-descp toolbox-calc\"\n  }, __jsx(\"div\", {\n    className: \"heading\"\n  }, \"description\"), __jsx(\"div\", {\n    className: \"\"\n  }, \"This tool is used to calculate 0% , 25% , 50% , 75% ,and 100% of range between two numbers.\")));\n};\n\nexport default Zero;","map":null,"metadata":{},"sourceType":"module"}