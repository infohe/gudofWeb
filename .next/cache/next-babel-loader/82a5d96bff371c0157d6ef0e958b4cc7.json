{"ast":null,"code":"import \"antd/lib/layout/style\";\nimport _Layout from \"antd/lib/layout\";\nimport \"antd/lib/row/style\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/card/style\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/tabs/style\";\nimport _Tabs from \"antd/lib/tabs\";\nvar __jsx = React.createElement;\nimport React from 'react';\nconst {\n  TabPane\n} = _Tabs;\nimport Link from 'next/link';\nimport { stringSpaceToHyphen } from '.';\nimport { useRouter } from 'next/router';\nexport default function SideNav({\n  names,\n  toolType,\n  key2\n}) {\n  const [array, setArray] = React.useState(names);\n  const [ToolType, setTooltype] = React.useState(toolType);\n\n  const handleChangeTrue = () => {\n    let newTooltype = ToolType;\n    newTooltype.map(item => item.show = true);\n    setTooltype(newTooltype);\n  };\n\n  React.useEffect(() => console.log(\"type\", ToolType));\n\n  const handleSearch = event => {\n    handleChangeTrue();\n    setArray(tools.filter(item => event.target.value !== \"\" && item.display.toLowerCase().indexOf(event.target.value.toLowerCase()) !== -1));\n    if (event.target.value === \"\") setArray(tools);\n    console.log(array);\n  };\n\n  const [tools, setTools] = React.useState(names);\n  return __jsx(\"div\", null, __jsx(_Layout, null, __jsx(_Tabs, {\n    style: {\n      marginTop: \"60px\"\n    },\n    tabPosition: \"top\",\n    defaultActiveKey: key2\n  }, ToolType !== undefined && ToolType.map(type => __jsx(TabPane, {\n    tab: type.name,\n    key: type.id\n  }, __jsx(\"div\", {\n    style: {\n      marginLeft: \"20px\",\n      marginRight: \"20px\"\n    }\n  }, __jsx(_Input, {\n    style: {\n      marginLeft: \"10px\",\n      marginRight: \"30px\"\n    },\n    placeholder: \"Search\",\n    prefix: __jsx(\"i\", {\n      style: {\n        marginTop: \"-5px\"\n      },\n      className: \"material-icons\"\n    }, \"search\"),\n    onInput: e => handleSearch(e)\n  }), __jsx(_Row, null, array.map(item => item.type === type.type && __jsx(React.Fragment, null, item.type === 'instrumentation' && __jsx(Link, {\n    href: `../../Instrumentation/${stringSpaceToHyphen(item.display)}`\n  }, __jsx(_Card, {\n    className: `${item.category === \"conversion\" ? active(item.name) : active(item.display)}`,\n    style: {\n      flex: 1\n    }\n  }, __jsx(\"a\", null, item.display))), item.type === 'electrical' && __jsx(Link, {\n    href: `../../Electrical/${stringSpaceToHyphen(item.display)}`\n  }, __jsx(_Card, {\n    className: `${item.category === \"conversion\" ? active(item.name) : active(item.display)}`,\n    style: {\n      flex: 1\n    }\n  }, __jsx(\"a\", null, item.display)), \"                      \"), item.type === 'conversions' && __jsx(Link, {\n    href: `../../Conversion/${item.name}`\n  }, __jsx(_Card, {\n    className: `${item.category === \"conversion\" ? active(item.name) : active(item.display)}`,\n    style: {\n      flex: 1\n    }\n  }, __jsx(\"a\", null, item.display)), \"                      \"), item.type === 'mechanical' && __jsx(Link, {\n    href: `../../Mechanical/${stringSpaceToHyphen(item.display)}`\n  }, __jsx(_Card, {\n    className: `${item.category === \"conversion\" ? active(item.name) : active(item.display)}`,\n    style: {\n      flex: 1\n    }\n  }, __jsx(\"a\", null, item.display)), \"                      \"))))))))));\n}\nexport const active = name => {\n  const router = useRouter();\n\n  if (router.query.name === stringSpaceToHyphen(name)) {\n    return \"activecard\";\n  } else return \"carditems1\";\n};","map":null,"metadata":{},"sourceType":"module"}