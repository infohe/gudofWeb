{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Head from 'next/head';\nimport { Tabs, Drawer } from 'antd';\nimport SideNav from '../../SideNav';\nimport DrawerNav from '../../DrawerNav';\nimport { Layout, Button, Row, Col, Input } from 'antd';\nimport Navbar from '../../Navbar';\nimport { useRouter } from 'next/router';\n\nvar Zero = function Zero(_ref) {\n  var names = _ref.names,\n      toolType = _ref.toolType;\n  var descp = \" Zero to X percentage conversion is a tool which finds percentages between two numbers.\";\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      visible = _React$useState2[0],\n      setVisible = _React$useState2[1];\n\n  var showDrawer = function showDrawer() {\n    if (window.innerWidth <= 700) setVisible(true);\n  };\n\n  var router = useRouter();\n\n  var onClose = function onClose() {\n    setVisible(false);\n  };\n\n  React.useEffect(function () {\n    if (window.innerWidth > 700) setVisible(false);\n  });\n\n  var _React$useState3 = React.useState(0),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      s = _React$useState4[0],\n      sets = _React$useState4[1];\n\n  var _React$useState5 = React.useState(100),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      e = _React$useState6[0],\n      sete = _React$useState6[1];\n\n  var _React$useState7 = React.useState(),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      r = _React$useState8[0],\n      setr = _React$useState8[1];\n\n  var setS = function setS(e) {\n    sets(Number(e.target.value));\n    calculate();\n  };\n\n  var setE = function setE(e) {\n    sete(Number(e.target.value));\n    calculate();\n  };\n\n  var calculate = function calculate() {\n    setr(e - s);\n  };\n\n  var click = function click() {\n    calculate();\n  }; // const id = props.match.params.id\n  // conversions.map(item=> console.log(item))\n\n\n  return __jsx(\"div\", null, __jsx(Head, null, __jsx(\"title\", null, router !== undefined && router.query.name), __jsx(\"link\", {\n    href: \"https://fonts.googleapis.com/icon?family=Material+Icons\",\n    rel: \"stylesheet\"\n  }), __jsx(\"meta\", {\n    key: \"description\",\n    name: \"description\",\n    content: descp\n  })), __jsx(Navbar, {\n    showDrawer: showDrawer\n  }), __jsx(\"div\", {\n    className: \"tools-container\"\n  }, __jsx(Drawer, {\n    width: 350,\n    title: \"gudofConvert\",\n    placement: \"left\",\n    closable: true,\n    onClose: onClose,\n    visible: visible\n  }, __jsx(DrawerNav, {\n    names: names,\n    toolType: toolType\n  })), __jsx(\"div\", {\n    className: \"tools-left\"\n  }, __jsx(SideNav, {\n    names: names,\n    toolType: toolType\n  })), __jsx(Layout, {\n    className: \"tool\"\n  }, __jsx(\"div\", {\n    className: \"heading\"\n  }, \"0-X % Conversion\"), __jsx(\"div\", {\n    className: \"heading\"\n  }, \"Calculation\"), __jsx(Row, {\n    className: \"row\"\n  }, __jsx(Col, {\n    span: 12\n  }, \"Start Value\"), __jsx(Col, {\n    span: 12\n  }, __jsx(Input, {\n    className: \"input box\",\n    style: {\n      border: \"1px solid gray\"\n    },\n    type: \"text\",\n    value: s,\n    onChange: function onChange(e) {\n      return setS(e);\n    }\n  }))), __jsx(Row, {\n    className: \"row\"\n  }, __jsx(Col, {\n    span: 12\n  }, \"End value\"), __jsx(Col, {\n    span: 12\n  }, __jsx(Input, {\n    className: \"input box\",\n    style: {\n      border: \"1px solid gray\"\n    },\n    type: \"text\",\n    value: e,\n    onChange: function onChange(e) {\n      return setE(e);\n    }\n  }))), __jsx(Row, null), __jsx(Row, {\n    className: \"row\"\n  }, __jsx(Col, {\n    style: {\n      textAlign: \"center\"\n    }\n  }, __jsx(Button, {\n    \"class\": \"calculate-button\",\n    onClick: function onClick() {\n      return click();\n    }\n  }, \"Calculate\"))), r !== undefined && __jsx(\"div\", {\n    className: \"result\"\n  }, __jsx(\"div\", {\n    className: \"resultheading\"\n  }, \"RESULT\"), __jsx(Row, null, __jsx(Col, {\n    span: 12,\n    className: \"result-head\"\n  }, \" 0%\"), __jsx(Col, null, \" \", s, \" \")), __jsx(Row, null, __jsx(Col, {\n    span: 12,\n    className: \"result-head\"\n  }, \" 25%\"), __jsx(Col, null, \" \", r / 4 + Number(s), \" \")), __jsx(Row, null, __jsx(Col, {\n    span: 12,\n    className: \"result-head\"\n  }, \" 50%\"), __jsx(Col, null, \" \", r / 2 + Number(s), \" \")), __jsx(Row, null, __jsx(Col, {\n    span: 12,\n    className: \"result-head\"\n  }, \" 75%\"), __jsx(Col, null, \" \", r * 3 / 4 + Number(s), \"  \")), __jsx(Row, null, __jsx(Col, {\n    span: 12,\n    className: \"result-head\"\n  }, \" 100%\"), __jsx(Col, null, \" \", e, \" \"))), __jsx(\"div\", {\n    className: \"descp\"\n  }, \"This tool is used to calculate 0% , 25% , 50% , 75% ,and 100% of range between two numbers.\"))));\n};\n\nexport var __N_SSG = true;\nexport default Zero;","map":null,"metadata":{},"sourceType":"module"}