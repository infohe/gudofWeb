{"ast":null,"code":"import \"antd/lib/layout/style\";\nimport _Layout from \"antd/lib/layout\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/col/style\";\nimport _Col from \"antd/lib/col\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/row/style\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/drawer/style\";\nimport _Drawer from \"antd/lib/drawer\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport SideNav from '../SideNav';\nimport DrawerNav from '../DrawerNav';\nimport Navbar from '../Navbar';\nimport Head from 'next/head';\nimport { names, toolType } from '../index';\nimport { useRouter } from 'next/router';\nimport { stringSpaceToHyphen } from '..';\n\nconst Conversion = ({\n  names,\n  toolType\n}) => {\n  const [visible, setVisible] = React.useState(false);\n\n  const showDrawer = () => {\n    if (window.innerWidth <= 700) setVisible(true);\n  };\n\n  const onClose = () => {\n    setVisible(false);\n  };\n\n  React.useEffect(() => {\n    if (window.innerWidth > 700) setVisible(false);\n  });\n  const router = useRouter();\n  const {\n    Option\n  } = _Select;\n\n  const isNumber = function (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  };\n\n  const [input1, setInput1] = React.useState();\n  const [input2, setInput2] = React.useState();\n  const [inn, setIn] = React.useState();\n  const [out, setOut] = React.useState();\n\n  const roundIt = (num, X) => {\n    X = !X ? 6 : X;\n    return Math.round(num * Math.pow(10, X)) / Math.pow(10, X);\n  };\n\n  const [answer, setAnswer] = React.useState(); // Indicate that name should be a public property on the component\n\n  const compute = function (current_conversion, conversion_calc, in_out) {\n    let value; //varvalue=current_conversion\n\n    if (in_out === 'in') {\n      console.log(input1);\n      value = input1;\n    } else {\n      value = input2;\n    }\n\n    console.log(in_out);\n    console.log(\"value\", value, \"inout\", in_out);\n    var first = inn;\n    var second = out;\n    var array = conversion_calc[current_conversion];\n    console.log(\"current converdion\", first);\n    var oneUnitFrom = array[first];\n    var oneUnitTo = array[second]; //Convert \"From\" units to base unit of category ie. celcius to Kelvin\n\n    if (isNumber(oneUnitFrom.scale)) {\n      value = value * oneUnitFrom.scale;\n    } else {\n      value = oneUnitFrom.scale(value);\n    }\n\n    console.log(\"oneUnitFrom.scale-val1:\" + value); //Next Convert into \"To\" units from the base unit of category ie. kelvin to fahrenheit\n\n    if (isNumber(oneUnitTo.scale)) {\n      value = value / oneUnitTo.scale;\n    } else {\n      value = oneUnitTo.scaleFrom(value);\n    }\n\n    console.log(\"oneUnitFrom.scale-val2:\" + value);\n\n    if (oneUnitTo.decimal !== undefined) {\n      value = roundIt(value, oneUnitTo.decimal);\n    }\n\n    return value;\n  };\n\n  const descriptions = [{\n    name: \"area\",\n    descp: \"\"\n  }, {\n    name: \"force\",\n    descp: \"\"\n  }, {\n    name: \"energy\",\n    descp: \"\"\n  }, {\n    name: \"fuel_consumption\",\n    descp: \"\"\n  }, {\n    name: \"time\",\n    descp: \"\"\n  }, {\n    name: \"mass\",\n    descp: \"\"\n  }, {\n    name: \"length\",\n    descp: \"\"\n  }, {\n    name: \"digital_storage\",\n    descp: \"\"\n  }, {\n    name: \"temperature\",\n    descp: \"\"\n  }, {\n    name: \"current\",\n    descp: \"\"\n  }, {\n    name: \"pressure\",\n    descp: \"\"\n  }, {\n    name: \"speed\",\n    descp: \"\"\n  }, {\n    name: \"power\",\n    descp: \"\"\n  }, {\n    name: \"charge\",\n    descp: \"\"\n  }];\n  return __jsx(\"div\", null, __jsx(Head, null, __jsx(\"title\", null, capitalize(router.query.name), \" Tools\"), __jsx(\"link\", {\n    href: \"https://fonts.googleapis.com/icon?family=Material+Icons\",\n    rel: \"stylesheet\"\n  }), descriptions.map(item => item.name === router.query.name && __jsx(\"meta\", {\n    key: \"description\",\n    name: \"description\",\n    content: item.descp\n  }))), __jsx(Navbar, {\n    showDrawer: showDrawer\n  }), __jsx(\"div\", {\n    className: \"tools-container\"\n  }, __jsx(_Drawer, {\n    width: 350,\n    title: \"gudofConvert\",\n    placement: \"left\",\n    closable: true,\n    onClose: onClose,\n    visible: visible\n  }, __jsx(DrawerNav, {\n    names: names,\n    toolType: toolType,\n    onClose: () => setVisible(false)\n  })), __jsx(\"div\", {\n    className: \"tools-left\"\n  }, __jsx(SideNav, {\n    names: names,\n    toolType: toolType,\n    key2: \"3\"\n  })), __jsx(_Layout, {\n    className: \"toolbox-layout\"\n  }, router.query.name !== undefined && __jsx(\"div\", null, __jsx(_Row, {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"toolbox-heading\"\n  }, conversion_fn[conversion_fn.findIndex(item => item.id === router.query.name)].name)), __jsx(\"hr\", {\n    className: \"hr\"\n  }), __jsx(\"div\", {\n    className: \"toolbox-calc\"\n  }, __jsx(\"div\", {\n    className: \"heading\"\n  }, \"CAlculation\"), __jsx(_Row, {\n    className: \"row\"\n  }, __jsx(_Col, {\n    style: {\n      flex: 1\n    }\n  }, __jsx(_Input, {\n    className: \"input box\",\n    type: \"number\",\n    value: input1,\n    onChange: e => {\n      console.log(\"input\", e.target.value);\n      setInput1(e.target.value);\n    }\n  })), __jsx(_Col, {\n    style: {\n      flex: 1\n    }\n  }, __jsx(_Select, {\n    style: {\n      border: \"1px solid gray\"\n    },\n    className: \"input box\",\n    class: \"box\",\n    value: inn,\n    onSelect: e => {\n      setIn(e);\n      console.log(e);\n    },\n    placeholder: \"Input\"\n  }, conversion_fn[conversion_fn.findIndex(item => item.id === router.query.name)].units.map(item => __jsx(Option, {\n    key: item.id,\n    value: item.id\n  }, item.name))))), __jsx(_Row, {\n    className: \"row\"\n  }, __jsx(_Col, {\n    style: {\n      flex: 1\n    }\n  }, __jsx(_Input, {\n    className: \"input box\",\n    type: \"number\",\n    value: answer,\n    disabled: true\n  })), __jsx(_Col, {\n    style: {\n      flex: 1\n    }\n  }, __jsx(_Select, {\n    className: \"input box\",\n    style: {\n      border: \"1px solid gray\"\n    },\n    class: \"box\",\n    value: out,\n    onSelect: e => {\n      setOut(e);\n    },\n    placeholder: \"Output\"\n  }, conversion_fn[conversion_fn.findIndex(item => item.id === router.query.name)].units.map(item => __jsx(Option, {\n    value: item.id\n  }, item.name))))), __jsx(_Button, {\n    className: \"calculate-button\",\n    onClick: () => {\n      setAnswer(compute(conversion_fn[conversion_fn.findIndex(item => item.id === router.query.name)].id, conversion_calc, 'in'));\n    }\n  }, \"Convert\")), __jsx(\"hr\", {\n    className: \"hr\"\n  }), answer !== undefined && __jsx(\"div\", null, __jsx(\"div\", {\n    className: \"toolbox-calc\"\n  }, __jsx(\"div\", {\n    className: \"heading\"\n  }, \"RESULT\"), input1, \" \", inn, \" =\", answer, \" \", out))))));\n};\n\nexport default Conversion;\nexport const conversion_calc = {\n  \"temperature\": {\n    \"celsius\": {\n      \"scale\": function (value) {\n        value = parseInt(value);\n        return value + 273.15;\n      },\n      \"scaleFrom\": function (value) {\n        value = parseInt(value);\n        return value - 273.15;\n      },\n      \"symbol\": \"\",\n      \"name\": \"Celsius\"\n    },\n    \"fahrenheit\": {\n      \"scale\": function (value) {\n        value = parseInt(value);\n        return 5 / 9 * (value + 459.67);\n      },\n      \"scaleFrom\": function (value) {\n        value = parseInt(value);\n        return 9 / 5 * value - 459.67;\n      },\n      \"symbol\": \"\",\n      \"name\": \"Fahrenheit\"\n    },\n    \"kelvin\": {\n      \"scale\": 1,\n      \"symbol\": \"\",\n      \"name\": \"Kelvin\"\n    }\n  },\n  \"pressure\": {\n    \"atm\": {\n      \"scale\": 1 / 0.986923,\n      \"symbol\": \"\",\n      \"name\": \"Atmosphere\"\n    },\n    \"b\": {\n      \"scale\": 1,\n      \"symbol\": \"\",\n      \"name\": \"bar\"\n    },\n    \"dcm\": {\n      \"scale\": 1 / 1000000,\n      \"symbol\": \"\",\n      \"name\": \"dynes/cm2\"\n    },\n    \"ihg\": {\n      \"scale\": 1 / 29.9213,\n      \"symbol\": \"\",\n      \"name\": \"in. Hg\"\n    },\n    \"iw\": {\n      \"scale\": 1 / 401.46307866999996,\n      \"symbol\": \"\",\n      \"name\": \"in. water\"\n    },\n    \"k\": {\n      \"scale\": 1 / 1.019716213,\n      \"symbol\": \"\",\n      \"name\": \"kg/cm2\"\n    },\n    \"m\": {\n      \"scale\": 1 / 1000,\n      \"symbol\": \"\",\n      \"name\": \"mbar\"\n    },\n    \"mtm\": {\n      \"scale\": 1 / 750061.673821,\n      \"symbol\": \"\",\n      \"name\": \"mtorr or micron\"\n    },\n    \"pnm\": {\n      \"scale\": 1 / 100000,\n      \"symbol\": \"\",\n      \"name\": \"Pa or N/m2\"\n    },\n    \"kpa\": {\n      \"scale\": 1 / 100,\n      \"symbol\": \"\",\n      \"name\": \"KPa\"\n    },\n    \"psi\": {\n      \"scale\": 1 / 14.50377,\n      \"symbol\": \"\",\n      \"name\": \"PSI or lb/in2\"\n    }\n  },\n  \"charge\": {\n    \"c\": {\n      \"scale\": 1,\n      \"symbol\": \"\",\n      \"name\": \"Coulomb\"\n    },\n    \"milli\": {\n      \"scale\": 1000,\n      \"symbol\": \"\",\n      \"name\": \"milliCoulomb\"\n    },\n    \"micro\": {\n      \"scale\": 1000000,\n      \"symbol\": \"\",\n      \"name\": \"microCoulomb\"\n    },\n    \"nano\": {\n      \"scale\": 1000000000,\n      \"symbol\": \"\",\n      \"name\": \"nanoCoulomb\"\n    },\n    \"pico\": {\n      \"scale\": 10 ** 12,\n      \"symbol\": \"\",\n      \"name\": \"picoCoulomb\"\n    },\n    \"e\": {\n      \"scale\": 6.24150975e+18,\n      \"symbol\": \"\",\n      \"name\": \"e Charge\"\n    },\n    \"amp\": {\n      \"scale\": 0.0002777777777778,\n      \"symbol\": \"\",\n      \"name\": \"Ampere Hours\"\n    }\n  },\n  \"length\": {\n    \"kilometer\": {\n      \"scale\": 1000,\n      \"symbol\": \"\",\n      \"name\": \"Kilometer\"\n    },\n    \"meters\": {\n      \"scale\": 1,\n      \"symbol\": \"\",\n      \"name\": \"Meters\"\n    },\n    \"centimeters\": {\n      \"scale\": 0.01,\n      \"symbol\": \"\",\n      \"name\": \"Centimeters\"\n    },\n    \"millimeters\": {\n      \"scale\": 0.001,\n      \"symbol\": \"\",\n      \"name\": \"Millimeters\"\n    },\n    \"miles\": {\n      \"scale\": 1609.344,\n      \"symbol\": \"\",\n      \"name\": \"Miles\"\n    },\n    \"yards\": {\n      \"scale\": 0.9144,\n      \"symbol\": \"\",\n      \"name\": \"Yards\"\n    },\n    \"feet\": {\n      \"scale\": 0.3048006096012192,\n      \"symbol\": \"\",\n      \"name\": \"Feet\"\n    },\n    \"inches\": {\n      \"scale\": 0.0254,\n      \"symbol\": \"\",\n      \"name\": \"Inches\"\n    },\n    \"nauticalMiles\": {\n      \"scale\": 1852,\n      \"symbol\": \"\",\n      \"name\": \"Nautical Miles\"\n    }\n  },\n  \"mass\": {\n    \"metricTon\": {\n      \"scale\": 1000,\n      \"symbol\": \"\",\n      \"name\": \"Metric Ton\"\n    },\n    \"kilogram\": {\n      \"scale\": 1,\n      \"symbol\": \"\",\n      \"name\": \"Kilogram\"\n    },\n    \"gram\": {\n      \"scale\": 0.001,\n      \"symbol\": \"\",\n      \"name\": \"Gram\"\n    },\n    \"milligram\": {\n      \"scale\": 0.000001,\n      \"symbol\": \"\",\n      \"name\": \"Milligram\"\n    },\n    \"mcg\": {\n      \"scale\": 1e-9,\n      \"symbol\": \"\",\n      \"name\": \"Mcg\"\n    },\n    \"longTon\": {\n      \"scale\": 1016.0469088,\n      \"symbol\": \"\",\n      \"name\": \"Long Ton\"\n    },\n    \"shortTon\": {\n      \"scale\": 907.18474,\n      \"symbol\": \"\",\n      \"name\": \"Short Ton\"\n    },\n    \"stones\": {\n      \"scale\": 6.35029318,\n      \"symbol\": \"\",\n      \"name\": \"Stones\"\n    },\n    \"pound\": {\n      \"scale\": 0.45359237,\n      \"symbol\": \"\",\n      \"name\": \"Pound\"\n    },\n    \"ounce\": {\n      \"scale\": 0.028349523125,\n      \"symbol\": \"\",\n      \"name\": \"Ounce\"\n    }\n  },\n  \"speed\": {\n    \"milesHour\": {\n      \"scale\": 0.44704,\n      \"symbol\": \"\",\n      \"name\": \"Miles/Hour\"\n    },\n    \"feetSec\": {\n      \"scale\": 0.3048,\n      \"symbol\": \"\",\n      \"name\": \"Feet/Sec\"\n    },\n    \"metersSec\": {\n      \"scale\": 1,\n      \"symbol\": \"\",\n      \"name\": \"Meters/Sec\"\n    },\n    \"kmHour\": {\n      \"scale\": 0.2777777777777778,\n      \"symbol\": \"\",\n      \"name\": \"Km/Hour\"\n    },\n    \"knots\": {\n      \"scale\": 0.5144444444444445,\n      \"symbol\": \"\",\n      \"name\": \"Knots\"\n    }\n  },\n  \"volume\": {\n    \"usGal\": {\n      \"scale\": 3.785411784,\n      \"symbol\": \"\",\n      \"name\": \"US Gal\"\n    },\n    \"usQuart\": {\n      \"scale\": 0.946352946,\n      \"symbol\": \"\",\n      \"name\": \"US Quart\"\n    },\n    \"usPint\": {\n      \"scale\": 0.473176473,\n      \"symbol\": \"\",\n      \"name\": \"US Pint\"\n    },\n    \"usCup\": {\n      \"scale\": 0.2365882365,\n      \"symbol\": \"\",\n      \"name\": \"US Cup\"\n    },\n    \"usOz\": {\n      \"scale\": 0.0295735295625,\n      \"symbol\": \"\",\n      \"name\": \"US Oz\"\n    },\n    \"usTbsp\": {\n      \"scale\": 0.01478676478125,\n      \"symbol\": \"\",\n      \"name\": \"US Tbsp.\"\n    },\n    \"usTsp\": {\n      \"scale\": 0.00492892159375,\n      \"symbol\": \"\",\n      \"name\": \"US Tsp.\"\n    },\n    \"cubicMeter\": {\n      \"scale\": 1000,\n      \"symbol\": \"\",\n      \"name\": \"Cubic Meter\"\n    },\n    \"liters\": {\n      \"scale\": 1,\n      \"symbol\": \"\",\n      \"name\": \"Liters\"\n    },\n    \"milliliter\": {\n      \"scale\": 0.001,\n      \"symbol\": \"\",\n      \"name\": \"Milliliter\"\n    },\n    \"imperialGal\": {\n      \"scale\": 4.54609,\n      \"symbol\": \"\",\n      \"name\": \"Imperial Gal\"\n    },\n    \"imperialQuart\": {\n      \"scale\": 1.1365225,\n      \"symbol\": \"\",\n      \"name\": \"Imperial Quart\"\n    },\n    \"imperialPint\": {\n      \"scale\": 0.56826125,\n      \"symbol\": \"\",\n      \"name\": \"Imperial Pint\"\n    },\n    \"imperialOz\": {\n      \"scale\": 0.0284130625,\n      \"symbol\": \"\",\n      \"name\": \"Imperial Oz\"\n    },\n    \"imperialTbsp\": {\n      \"scale\": 0.0177582,\n      \"symbol\": \"\",\n      \"name\": \"Imperial Tbsp.\"\n    },\n    \"imperialTsp\": {\n      \"scale\": 0.00591939,\n      \"symbol\": \"\",\n      \"name\": \"Imperial Tsp.\"\n    },\n    \"cubicFoot\": {\n      \"scale\": 28.316846592,\n      \"symbol\": \"\",\n      \"name\": \"Cubic Foot\"\n    },\n    \"cubicInch\": {\n      \"scale\": 0.016387064,\n      \"symbol\": \"\",\n      \"name\": \"Cubic Inch\"\n    }\n  },\n  \"area\": {\n    \"squareKm\": {\n      \"scale\": 1000000,\n      \"symbol\": \"\",\n      \"name\": \"Square Km\"\n    },\n    \"hectare\": {\n      \"scale\": 10000,\n      \"symbol\": \"\",\n      \"name\": \"Hectare\"\n    },\n    \"squareMeter\": {\n      \"scale\": 1,\n      \"symbol\": \"\",\n      \"name\": \"Square Meter\"\n    },\n    \"squareMile\": {\n      \"scale\": 2589988.110336,\n      \"symbol\": \"\",\n      \"name\": \"Square Mile\"\n    },\n    \"acre\": {\n      \"scale\": 4046.8564224,\n      \"symbol\": \"\",\n      \"name\": \"Acre\"\n    },\n    \"squareYard\": {\n      \"scale\": 0.83612736,\n      \"symbol\": \"\",\n      \"name\": \"Square Yard\"\n    },\n    \"squareFoot\": {\n      \"scale\": 0.09290304,\n      \"symbol\": \"\",\n      \"name\": \"Square Foot\"\n    },\n    \"squareInch\": {\n      \"scale\": 0.00064516,\n      \"symbol\": \"\",\n      \"name\": \"Square Inch\"\n    }\n  },\n  \"fuel_consumption\": {\n    \"mpgUs\": {\n      \"scale\": function (value) {\n        return 2.3521458333333333333333333333333e-3 / value;\n      },\n      \"scaleFrom\": function (value) {\n        return 2.3521458333333333333333333333333e-3 / value;\n      },\n      \"symbol\": \"\",\n      \"name\": \"MPG (US)\"\n    },\n    \"mpgImp\": {\n      \"scale\": function (value) {\n        return 2.8248093633182215859381213711925e-3 / value;\n      },\n      \"scaleFrom\": function (value) {\n        return 2.8248093633182215859381213711925e-3 / value;\n      },\n      \"symbol\": \"\",\n      \"name\": \"MPG (imp.)\"\n    },\n    \"kmLiter\": {\n      \"scale\": function (value) {\n        return 0.001 / value;\n      },\n      \"scaleFrom\": function (value) {\n        return 0.001 / value;\n      },\n      \"symbol\": \"\",\n      \"name\": \"Km/Liter\"\n    },\n    \"liter100km\": {\n      \"scale\": 0.00001,\n      \"symbol\": \"\",\n      \"name\": \"Liter/100km\"\n    }\n  },\n  \"time\": {\n    \"nanoseconds\": {\n      \"scale\": 1e-9,\n      \"symbol\": \"\",\n      \"name\": \"Nanoseconds\"\n    },\n    \"microseconds\": {\n      \"scale\": 0.000001,\n      \"symbol\": \"\",\n      \"name\": \"Microseconds\"\n    },\n    \"milliseconds\": {\n      \"scale\": 0.001,\n      \"symbol\": \"\",\n      \"name\": \"Milliseconds\"\n    },\n    \"seconds\": {\n      \"scale\": 1,\n      \"symbol\": \"\",\n      \"name\": \"Seconds\"\n    },\n    \"minutes\": {\n      \"scale\": 60,\n      \"symbol\": \"\",\n      \"name\": \"Minutes\"\n    },\n    \"hours\": {\n      \"scale\": 3600,\n      \"symbol\": \"\",\n      \"name\": \"Hours\"\n    },\n    \"days\": {\n      \"scale\": 86400,\n      \"symbol\": \"\",\n      \"name\": \"Days\"\n    },\n    \"weeks\": {\n      \"scale\": 604800,\n      \"symbol\": \"\",\n      \"name\": \"Weeks\"\n    },\n    \"months\": {\n      \"scale\": 2628000,\n      \"symbol\": \"\",\n      \"name\": \"Months\"\n    },\n    \"years\": {\n      \"scale\": 31536000,\n      \"symbol\": \"\",\n      \"name\": \"Years\"\n    },\n    \"decades\": {\n      \"scale\": 315360000,\n      \"symbol\": \"\",\n      \"name\": \"Decades\"\n    },\n    \"century\": {\n      \"scale\": 3.1689e-10,\n      \"symbol\": \"\",\n      \"name\": \"Century\"\n    }\n  },\n  \"digital_storage\": {\n    \"bits\": {\n      \"scale\": 0.125,\n      \"symbol\": \"\",\n      \"name\": \"Bits\"\n    },\n    \"bytes\": {\n      \"scale\": 1,\n      \"symbol\": \"\",\n      \"name\": \"Bytes\"\n    },\n    \"kilobits\": {\n      \"scale\": 128,\n      \"symbol\": \"\",\n      \"name\": \"Kilobits\"\n    },\n    \"kilobytes\": {\n      \"scale\": 1024,\n      \"symbol\": \"\",\n      \"name\": \"Kilobytes\"\n    },\n    \"megabits\": {\n      \"scale\": 131072,\n      \"symbol\": \"\",\n      \"name\": \"Megabits\"\n    },\n    \"megabytes\": {\n      \"scale\": 1048576,\n      \"symbol\": \"\",\n      \"name\": \"Megabytes\"\n    },\n    \"gigabits\": {\n      \"scale\": 134217728,\n      \"symbol\": \"\",\n      \"name\": \"Gigabits\"\n    },\n    \"gigabytes\": {\n      \"scale\": 1073741824,\n      \"symbol\": \"\",\n      \"name\": \"Gigabytes\"\n    },\n    \"terabits\": {\n      \"scale\": 137438953472,\n      \"symbol\": \"\",\n      \"name\": \"Terabits\"\n    },\n    \"terabytes\": {\n      \"scale\": 1099511627776,\n      \"symbol\": \"\",\n      \"name\": \"Terabytes\"\n    },\n    \"petabits\": {\n      \"scale\": 140737488355328,\n      \"symbol\": \"\",\n      \"name\": \"Petabits\"\n    },\n    \"petabytes\": {\n      \"scale\": 1125899906842624,\n      \"symbol\": \"\",\n      \"name\": \"Petabytes\"\n    },\n    \"exabits\": {\n      \"scale\": 144115188075855870,\n      \"symbol\": \"\",\n      \"name\": \"Exabits\"\n    },\n    \"exabytes\": {\n      \"scale\": 1152921504606847000,\n      \"symbol\": \"\",\n      \"name\": \"Exabytes\"\n    }\n  },\n  \"energy\": {\n    \"btuTh\": {\n      \"scale\": 1054.35,\n      \"symbol\": \"\",\n      \"name\": \"Btu (th)\"\n    },\n    \"btuMean\": {\n      \"scale\": 1055.87,\n      \"symbol\": \"\",\n      \"name\": \"Btu (mean)\"\n    },\n    \"caloriesIt\": {\n      \"scale\": 4.1868,\n      \"symbol\": \"\",\n      \"name\": \"Calories (IT)\"\n    },\n    \"caloriesTh\": {\n      \"scale\": 4.184,\n      \"symbol\": \"\",\n      \"name\": \"Calories (th)\"\n    },\n    \"caloriesMean\": {\n      \"scale\": 4.19002,\n      \"symbol\": \"\",\n      \"name\": \"Calories (mean)\"\n    },\n    \"calories15c\": {\n      \"scale\": 4.1858,\n      \"symbol\": \"\",\n      \"name\": \"Calories (15C)\"\n    },\n    \"calories20c\": {\n      \"scale\": 4.1819,\n      \"symbol\": \"\",\n      \"name\": \"Calories (20C)\"\n    },\n    \"caloriesFood\": {\n      \"scale\": 4186,\n      \"symbol\": \"\",\n      \"name\": \"Calories (food)\"\n    },\n    \"centigradeHeatUnits\": {\n      \"scale\": 1900.4,\n      \"symbol\": \"\",\n      \"name\": \"Centigrade Heat Units\"\n    },\n    \"electronVolts\": {\n      \"scale\": 1.60219e-19,\n      \"symbol\": \"\",\n      \"name\": \"Electron Volts\"\n    },\n    \"ergs\": {\n      \"scale\": 1e-7,\n      \"symbol\": \"\",\n      \"name\": \"Ergs\"\n    },\n    \"footPoundForce\": {\n      \"scale\": 1.3558179483314003,\n      \"symbol\": \"\",\n      \"name\": \"Foot-Pound Force\"\n    },\n    \"footPoundals\": {\n      \"scale\": 0.04214,\n      \"symbol\": \"\",\n      \"name\": \"Foot Poundals\"\n    },\n    \"gigajoules\": {\n      \"scale\": 1000000000,\n      \"symbol\": \"\",\n      \"name\": \"Gigajoules\"\n    },\n    \"horsepowerHours\": {\n      \"scale\": 2684520,\n      \"symbol\": \"\",\n      \"name\": \"Horsepower Hours\"\n    },\n    \"inchPoundForce\": {\n      \"scale\": 0.11298482902761668,\n      \"symbol\": \"\",\n      \"name\": \"Inch-Pound Force\"\n    },\n    \"joules\": {\n      \"scale\": 1,\n      \"symbol\": \"\",\n      \"name\": \"Joules\"\n    },\n    \"kilocaloriesIt\": {\n      \"scale\": 4186.8,\n      \"symbol\": \"\",\n      \"name\": \"Kilocalories (IT)\"\n    },\n    \"kilocaloriesTh\": {\n      \"scale\": 4184,\n      \"symbol\": \"\",\n      \"name\": \"Kilocalories (th)\"\n    },\n    \"kilogramForceMeters\": {\n      \"scale\": 9.80665,\n      \"symbol\": \"\",\n      \"name\": \"Kilogram-Force Meters\"\n    },\n    \"kilojoules\": {\n      \"scale\": 1000,\n      \"symbol\": \"\",\n      \"name\": \"Kilojoules\"\n    },\n    \"kilowattHours\": {\n      \"scale\": 3600000,\n      \"symbol\": \"\",\n      \"name\": \"Kilowatt Hours\"\n    },\n    \"megajoules\": {\n      \"scale\": 1000000,\n      \"symbol\": \"\",\n      \"name\": \"Megajoules\"\n    },\n    \"newtonMeters\": {\n      \"scale\": 1,\n      \"symbol\": \"\",\n      \"name\": \"Newton Meters\"\n    },\n    \"therms\": {\n      \"scale\": 105505585.257348,\n      \"symbol\": \"\",\n      \"name\": \"Therms\"\n    },\n    \"wattSeconds\": {\n      \"scale\": 1,\n      \"symbol\": \"\",\n      \"name\": \"Watt Seconds\"\n    },\n    \"wattHours\": {\n      \"scale\": 3600,\n      \"symbol\": \"\",\n      \"name\": \"Watt Hours\"\n    }\n  },\n  \"power\": {\n    \"watts\": {\n      \"scale\": 1,\n      \"symbol\": \"\",\n      \"name\": \"Watts\"\n    },\n    \"kilowatts\": {\n      \"scale\": 1000,\n      \"symbol\": \"\",\n      \"name\": \"Kilowatts\"\n    },\n    \"megawatts\": {\n      \"scale\": 1000000,\n      \"symbol\": \"\",\n      \"name\": \"Megawatts\"\n    },\n    \"gigawatts\": {\n      \"scale\": 1000000000,\n      \"symbol\": \"\",\n      \"name\": \"Gigawatts\"\n    },\n    \"btuHour\": {\n      \"scale\": 0.293071,\n      \"symbol\": \"\",\n      \"name\": \"Btu/Hour\"\n    },\n    \"btuMinute\": {\n      \"scale\": 17.584267,\n      \"symbol\": \"\",\n      \"name\": \"Btu/Minute\"\n    },\n    \"btuSecond\": {\n      \"scale\": 1055.056,\n      \"symbol\": \"\",\n      \"name\": \"Btu/Second\"\n    },\n    \"caloriesthHour\": {\n      \"scale\": 0.001162222222222222,\n      \"symbol\": \"\",\n      \"name\": \"Calories(th)/Hour\"\n    },\n    \"caloriesthMinute\": {\n      \"scale\": 0.06973333333333333,\n      \"symbol\": \"\",\n      \"name\": \"Calories(th)/Minute\"\n    },\n    \"caloriesthSecond\": {\n      \"scale\": 4.184,\n      \"symbol\": \"\",\n      \"name\": \"Calories(th)/Second\"\n    },\n    \"kilocaloriesthHour\": {\n      \"scale\": 1.1622222222222223,\n      \"symbol\": \"\",\n      \"name\": \"Kilocalories(th)/Hour\"\n    },\n    \"kilocaloriesthMinute\": {\n      \"scale\": 69.73333333333333,\n      \"symbol\": \"\",\n      \"name\": \"Kilocalories(th)/Minute\"\n    },\n    \"footPoundsForceMinute\": {\n      \"scale\": 0.022597,\n      \"symbol\": \"\",\n      \"name\": \"Foot Pounds-Force/Minute\"\n    },\n    \"footPoundsForceSecond\": {\n      \"scale\": 1.35582,\n      \"symbol\": \"\",\n      \"name\": \"Foot Pounds-Force/Second\"\n    },\n    \"horsepowersElectric\": {\n      \"scale\": 746,\n      \"symbol\": \"\",\n      \"name\": \"Horsepowers (electric)\"\n    },\n    \"horsepowersInternational\": {\n      \"scale\": 745.6998715822702,\n      \"symbol\": \"\",\n      \"name\": \"Horsepowers (international)\"\n    },\n    \"horsepowersWater\": {\n      \"scale\": 746.043,\n      \"symbol\": \"\",\n      \"name\": \"Horsepowers (water)\"\n    },\n    \"horsepowersMetric\": {\n      \"scale\": 735.4988,\n      \"symbol\": \"\",\n      \"name\": \"Horsepowers (metric)\"\n    },\n    \"joulesHour\": {\n      \"scale\": 0.0002777777777777778,\n      \"symbol\": \"\",\n      \"name\": \"Joules/Hour\"\n    },\n    \"joulesMinute\": {\n      \"scale\": 0.016666666666666666,\n      \"symbol\": \"\",\n      \"name\": \"Joules/Minute\"\n    },\n    \"joulesSecond\": {\n      \"scale\": 1,\n      \"symbol\": \"\",\n      \"name\": \"Joules/Second\"\n    },\n    \"kilogramForceMetersHour\": {\n      \"scale\": 0.002724,\n      \"symbol\": \"\",\n      \"name\": \"Kilogram-Force Meters/Hour\"\n    },\n    \"kilogramForceMetersMinute\": {\n      \"scale\": 0.163444,\n      \"symbol\": \"\",\n      \"name\": \"Kilogram-Force Meters/Minute\"\n    }\n  },\n  \"force\": {\n    \"newtons\": {\n      \"scale\": 1,\n      \"symbol\": \"\",\n      \"name\": \"Newtons\"\n    },\n    \"kilonewtons\": {\n      \"scale\": 1000,\n      \"symbol\": \"\",\n      \"name\": \"Kilonewtons\"\n    },\n    \"meganewtons\": {\n      \"scale\": 1000000,\n      \"symbol\": \"\",\n      \"name\": \"Meganewtons\"\n    },\n    \"dynes\": {\n      \"scale\": 0.00001,\n      \"symbol\": \"\",\n      \"name\": \"Dynes\"\n    },\n    \"kilogramsForce\": {\n      \"scale\": 9.80665,\n      \"symbol\": \"\",\n      \"name\": \"Kilograms Force\"\n    },\n    \"kips\": {\n      \"scale\": 4448.222,\n      \"symbol\": \"\",\n      \"name\": \"Kips\"\n    },\n    \"poundsForce\": {\n      \"scale\": 4.4482216152605,\n      \"symbol\": \"\",\n      \"name\": \"Pounds Force\"\n    },\n    \"poundals\": {\n      \"scale\": 0.138255,\n      \"symbol\": \"\",\n      \"name\": \"Poundals\"\n    },\n    \"sthenes=kn\": {\n      \"scale\": 1000,\n      \"symbol\": \"\",\n      \"name\": \"Sthenes (=kN)\"\n    },\n    \"tonnesForce\": {\n      \"scale\": 9806.65,\n      \"symbol\": \"\",\n      \"name\": \"Tonnes Force\"\n    },\n    \"tonsForceUk\": {\n      \"scale\": 9964.01641818352,\n      \"symbol\": \"\",\n      \"name\": \"Tons Force (UK)\"\n    },\n    \"tonsForceUs\": {\n      \"scale\": 8896.443230521,\n      \"symbol\": \"\",\n      \"name\": \"Tons Force (US)\"\n    }\n  },\n  \"electric_current\": {\n    \"abampere\": {\n      \"scale\": 10,\n      \"symbol\": \"\",\n      \"name\": \"Abampere\"\n    },\n    \"ampere\": {\n      \"scale\": 1,\n      \"symbol\": \"\",\n      \"name\": \"Ampere\"\n    },\n    \"biot\": {\n      \"scale\": 10,\n      \"symbol\": \"\",\n      \"name\": \"Biot\"\n    },\n    \"centiampere\": {\n      \"scale\": 0.01,\n      \"symbol\": \"\",\n      \"name\": \"Centiampere\"\n    },\n    \"coulombSecond\": {\n      \"scale\": 1,\n      \"symbol\": \"\",\n      \"name\": \"Coulomb/Second\"\n    },\n    \"emuOfCurrent\": {\n      \"scale\": 10,\n      \"symbol\": \"\",\n      \"name\": \"EMU Of Current\"\n    },\n    \"esuOfCurrent\": {\n      \"scale\": 3.335641e-10,\n      \"symbol\": \"\",\n      \"name\": \"ESU Of Current\"\n    },\n    \"franklinSecond\": {\n      \"scale\": 3.335641e-10,\n      \"symbol\": \"\",\n      \"name\": \"Franklin/Second\"\n    },\n    \"gaussianElectricCurrent\": {\n      \"scale\": 3.335641e-10,\n      \"symbol\": \"\",\n      \"name\": \"Gaussian Electric Current\"\n    },\n    \"gigaampere\": {\n      \"scale\": 1000000000,\n      \"symbol\": \"\",\n      \"name\": \"Gigaampere\"\n    },\n    \"gilbert\": {\n      \"scale\": 0.79577472,\n      \"symbol\": \"\",\n      \"name\": \"Gilbert\"\n    },\n    \"kiloampere\": {\n      \"scale\": 1000,\n      \"symbol\": \"\",\n      \"name\": \"Kiloampere\"\n    },\n    \"megaampere\": {\n      \"scale\": 1000000,\n      \"symbol\": \"\",\n      \"name\": \"Megaampere\"\n    },\n    \"microampere\": {\n      \"scale\": 0.000001,\n      \"symbol\": \"\",\n      \"name\": \"Microampere\"\n    },\n    \"milliampere\": {\n      \"scale\": 0.001,\n      \"symbol\": \"\",\n      \"name\": \"Milliampere\"\n    },\n    \"milliamp\": {\n      \"scale\": 0.001,\n      \"symbol\": \"\",\n      \"name\": \"Milliamp\"\n    },\n    \"manoampere\": {\n      \"scale\": 1e-9,\n      \"symbol\": \"\",\n      \"name\": \"Manoampere\"\n    },\n    \"picoampere\": {\n      \"scale\": 1e-12,\n      \"symbol\": \"\",\n      \"name\": \"Picoampere\"\n    },\n    \"siemensVolt\": {\n      \"scale\": 1,\n      \"symbol\": \"\",\n      \"name\": \"Siemens Volt\"\n    },\n    \"statampere\": {\n      \"scale\": 3.335641e-10,\n      \"symbol\": \"\",\n      \"name\": \"Statampere\"\n    },\n    \"teraampere\": {\n      \"scale\": 1000000000000,\n      \"symbol\": \"\",\n      \"name\": \"Teraampere\"\n    },\n    \"voltOhm\": {\n      \"scale\": 1,\n      \"symbol\": \"\",\n      \"name\": \"Volt/Ohm\"\n    },\n    \"wattVolt\": {\n      \"scale\": 1,\n      \"symbol\": \"\",\n      \"name\": \"Watt/Volt\"\n    },\n    \"weberHenry\": {\n      \"scale\": 1,\n      \"symbol\": \"\",\n      \"name\": \"Weber/Henry\"\n    }\n  }\n}; //conversion array list for input\n\nexport const conversion_fn = [{\n  id: \"pressure\",\n  type: \"general\",\n  name: \"Pressure\",\n  // in: 1,\n  from: {\n    name: \"Atmosphere\",\n    id: \"atm\"\n  },\n  to: {\n    name: \"bar\",\n    id: \"b\"\n  },\n  units: [{\n    name: \"Atmosphere\",\n    id: \"atm\"\n  }, {\n    name: \"bar\",\n    id: \"b\"\n  }, {\n    name: \"dynes/cm2\",\n    id: \"dcm\"\n  }, {\n    name: \"in. Hg\",\n    id: \"ihg\"\n  }, {\n    name: \"in. water\",\n    id: \"iw\"\n  }, {\n    name: \"kg/cm2\",\n    id: \"k\"\n  }, {\n    name: \"mbar\",\n    id: \"m\"\n  }, {\n    name: \"mtorr or micron\",\n    id: \"mtm\"\n  }, {\n    name: \"Pa or N/m2\",\n    id: \"pnm\"\n  }, {\n    name: \"KPa\",\n    id: \"kpa\"\n  }, {\n    name: \"PSI or lb/in2\",\n    id: \"psi\"\n  }],\n  input_type: {\n    from: {\n      type: 'tel'\n    },\n    to: {\n      type: 'tel'\n    }\n  }\n}, {\n  id: \"charge\",\n  type: \"general\",\n  name: \"Charge\",\n  // in: 1,\n  from: {\n    name: \"Coulomb\",\n    id: \"c\"\n  },\n  to: {\n    name: \"Milli Coulomb\",\n    id: \"milli\"\n  },\n  units: [{\n    name: \"Coulomb\",\n    id: \"c\"\n  }, {\n    name: \"Milli Coulomb\",\n    id: \"milli\"\n  }, {\n    name: \"Micro Coulomb\",\n    id: \"micro\"\n  }, {\n    name: \"Nano Coulomb\",\n    id: \"nano\"\n  }, {\n    name: \"pico Coulomb\",\n    id: \"pico\"\n  }, {\n    name: \"e Charge\",\n    id: \"e\"\n  }, {\n    name: \"Ampere Hours\",\n    id: \"amp\"\n  }],\n  input_type: {\n    from: {\n      type: 'tel'\n    },\n    to: {\n      type: 'tel'\n    }\n  }\n}, {\n  id: \"temperature\",\n  type: \"general\",\n  name: \"Temperature\",\n  from: {\n    name: \"Celsius\",\n    id: \"celsius\"\n  },\n  to: {\n    name: \"Fahrenheit\",\n    id: \"fahrenheit\"\n  },\n  units: [{\n    name: \"Celsius\",\n    id: \"celsius\"\n  }, {\n    name: \"Fahrenheit\",\n    id: \"fahrenheit\"\n  }, {\n    name: \"Kelvin\",\n    id: \"kelvin\"\n  }]\n}, {\n  id: \"length\",\n  type: \"general\",\n  name: \"Length\",\n  from: {\n    name: \"Kilometer\",\n    id: \"kilometer\"\n  },\n  to: {\n    name: \"Meters\",\n    id: \"meters\"\n  },\n  units: [{\n    name: \"Kilometer (km)\",\n    id: \"kilometer\"\n  }, {\n    name: \"Meters (m)\",\n    id: \"meters\"\n  }, {\n    name: \"Centimeters (cm)\",\n    id: \"centimeters\"\n  }, {\n    name: \"Millimeters (mm)\",\n    id: \"millimeters\"\n  }, {\n    name: \"Miles\",\n    id: \"miles\"\n  }, {\n    name: \"Yards\",\n    id: \"yards\"\n  }, {\n    name: \"Feet\",\n    id: \"feet\"\n  }, {\n    name: \"Inches\",\n    id: \"inches\"\n  }, {\n    name: \"Nautical Miles\",\n    id: \"nauticalMiles\"\n  }],\n  input_type: {\n    from: {\n      type: 'tel'\n    },\n    to: {\n      type: 'tel'\n    }\n  }\n}, {\n  id: \"mass\",\n  type: \"general\",\n  name: \"Mass\",\n  from: {\n    name: \"Metric Ton\",\n    id: \"metricTon\"\n  },\n  to: {\n    name: \"Kilogram\",\n    id: \"kilogram\"\n  },\n  units: [{\n    name: \"Metric Ton\",\n    id: \"metricTon\"\n  }, {\n    name: \"Kilogram\",\n    id: \"kilogram\"\n  }, {\n    name: \"Gram\",\n    id: \"gram\"\n  }, {\n    name: \"Milligram\",\n    id: \"milligram\"\n  }, {\n    name: \"Mcg\",\n    id: \"mcg\"\n  }, {\n    name: \"Long Ton\",\n    id: \"longTon\"\n  }, {\n    name: \"Short Ton\",\n    id: \"shortTon\"\n  }, {\n    name: \"Stones\",\n    id: \"stones\"\n  }, {\n    name: \"Pound\",\n    id: \"pound\"\n  }, {\n    name: \"Ounce\",\n    id: \"ounce\"\n  }],\n  input_type: {\n    from: {\n      type: 'tel'\n    },\n    to: {\n      type: 'tel'\n    }\n  }\n}, {\n  id: \"speed\",\n  type: \"general\",\n  name: \"Speed\",\n  from: {\n    name: \"Miles/Hour\",\n    id: \"milesHour\"\n  },\n  to: {\n    name: \"Feet/Sec\",\n    id: \"feetSec\"\n  },\n  units: [{\n    name: \"Miles/Hour\",\n    id: \"milesHour\"\n  }, {\n    name: \"Feet/Sec\",\n    id: \"feetSec\"\n  }, {\n    name: \"Meters/Sec\",\n    id: \"metersSec\"\n  }, {\n    name: \"Km/Hour\",\n    id: \"kmHour\"\n  }, {\n    name: \"Knots\",\n    id: \"knots\"\n  }],\n  input_type: {\n    from: {\n      type: 'tel'\n    },\n    to: {\n      type: 'tel'\n    }\n  }\n}, {\n  id: \"volume\",\n  type: \"general\",\n  name: \"Volume\",\n  from: {\n    name: \"US Gal\",\n    id: \"usGal\"\n  },\n  to: {\n    name: \"US Quart\",\n    id: \"usQuart\"\n  },\n  units: [{\n    \"name\": \"US Gal\",\n    \"id\": \"usGal\"\n  }, {\n    \"name\": \"US Quart\",\n    \"id\": \"usQuart\"\n  }, {\n    \"name\": \"US Pint\",\n    \"id\": \"usPint\"\n  }, {\n    \"name\": \"US Cup\",\n    \"id\": \"usCup\"\n  }, {\n    \"name\": \"US Oz\",\n    \"id\": \"usOz\"\n  }, {\n    \"name\": \"US Tbsp.\",\n    \"id\": \"usTbsp\"\n  }, {\n    \"name\": \"US Tsp.\",\n    \"id\": \"usTsp\"\n  }, {\n    \"name\": \"Cubic Meter\",\n    \"id\": \"cubicMeter\"\n  }, {\n    \"name\": \"Liters\",\n    \"id\": \"liters\"\n  }, {\n    \"name\": \"Milliliter\",\n    \"id\": \"milliliter\"\n  }, {\n    \"name\": \"Imperial Gal\",\n    \"id\": \"imperialGal\"\n  }, {\n    \"name\": \"Imperial Quart\",\n    \"id\": \"imperialQuart\"\n  }, {\n    \"name\": \"Imperial Pint\",\n    \"id\": \"imperialPint\"\n  }, {\n    \"name\": \"Imperial Oz\",\n    \"id\": \"imperialOz\"\n  }, {\n    \"name\": \"Imperial Tbsp.\",\n    \"id\": \"imperialTbsp\"\n  }, {\n    \"name\": \"Imperial Tsp.\",\n    \"id\": \"imperialTsp\"\n  }, {\n    \"name\": \"Cubic Foot\",\n    \"id\": \"cubicFoot\"\n  }, {\n    \"name\": \"Cubic Inch\",\n    \"id\": \"cubicInch\"\n  }],\n  input_type: {\n    from: {\n      type: 'tel'\n    },\n    to: {\n      type: 'tel'\n    }\n  }\n}, {\n  id: \"area\",\n  type: \"general\",\n  name: \"Area\",\n  from: {\n    name: \"Square Km\",\n    id: \"squareKm\"\n  },\n  to: {\n    name: \"Hectare\",\n    id: \"hectare\"\n  },\n  units: [{\n    \"name\": \"Square Km\",\n    \"id\": \"squareKm\"\n  }, {\n    \"name\": \"Hectare\",\n    \"id\": \"hectare\"\n  }, {\n    \"name\": \"Square Meter\",\n    \"id\": \"squareMeter\"\n  }, {\n    \"name\": \"Square Mile\",\n    \"id\": \"squareMile\"\n  }, {\n    \"name\": \"Acre\",\n    \"id\": \"acre\"\n  }, {\n    \"name\": \"Square Yard\",\n    \"id\": \"squareYard\"\n  }, {\n    \"name\": \"Square Foot\",\n    \"id\": \"squareFoot\"\n  }, {\n    \"name\": \"Square Inch\",\n    \"id\": \"squareInch\"\n  }],\n  input_type: {\n    from: {\n      type: 'tel'\n    },\n    to: {\n      type: 'tel'\n    }\n  }\n}, {\n  id: \"fuel_consumption\",\n  type: \"general\",\n  name: \"Fuel Consumption\",\n  from: {\n    name: \"MPG (US)\",\n    id: \"mpgUs\"\n  },\n  to: {\n    name: \"MPG (imp.)\",\n    id: \"mpgImp\"\n  },\n  units: [{\n    \"name\": \"MPG (US)\",\n    \"id\": \"mpgUs\"\n  }, {\n    \"name\": \"MPG (imp.)\",\n    \"id\": \"mpgImp\"\n  }, {\n    \"name\": \"Km\\/Liter\",\n    \"id\": \"kmLiter\"\n  }, {\n    \"name\": \"Liter\\/100km\",\n    \"id\": \"liter100km\"\n  }],\n  input_type: {\n    from: {\n      type: 'tel'\n    },\n    to: {\n      type: 'tel'\n    }\n  }\n}, {\n  id: \"time\",\n  type: \"general\",\n  name: \"Time\",\n  from: {\n    name: \"Nanoseconds\",\n    id: \"nanoseconds\"\n  },\n  to: {\n    name: \"Microseconds\",\n    id: \"microseconds\"\n  },\n  units: [{\n    \"name\": \"Nanoseconds\",\n    \"id\": \"nanoseconds\"\n  }, {\n    \"name\": \"Microseconds\",\n    \"id\": \"microseconds\"\n  }, {\n    \"name\": \"Milliseconds\",\n    \"id\": \"milliseconds\"\n  }, {\n    \"name\": \"Seconds\",\n    \"id\": \"seconds\"\n  }, {\n    \"name\": \"Minutes\",\n    \"id\": \"minutes\"\n  }, {\n    \"name\": \"Hours\",\n    \"id\": \"hours\"\n  }, {\n    \"name\": \"Days\",\n    \"id\": \"days\"\n  }, {\n    \"name\": \"Weeks\",\n    \"id\": \"weeks\"\n  }, {\n    \"name\": \"Months\",\n    \"id\": \"months\"\n  }, {\n    \"name\": \"Years\",\n    \"id\": \"years\"\n  }, {\n    \"name\": \"Decades\",\n    \"id\": \"decades\"\n  }, {\n    \"name\": \"Century\",\n    \"id\": \"century\"\n  }],\n  input_type: {\n    from: {\n      type: 'tel'\n    },\n    to: {\n      type: 'tel'\n    }\n  }\n}, {\n  id: \"digital_storage\",\n  type: \"general\",\n  name: \"Digital Storage\",\n  from: {\n    name: \"Bits\",\n    id: \"bits\"\n  },\n  to: {\n    name: \"Bytes\",\n    id: \"bytes\"\n  },\n  units: [{\n    \"name\": \"Bits\",\n    \"id\": \"bits\"\n  }, {\n    \"name\": \"Bytes\",\n    \"id\": \"bytes\"\n  }, {\n    \"name\": \"Kilobits\",\n    \"id\": \"kilobits\"\n  }, {\n    \"name\": \"Kilobytes\",\n    \"id\": \"kilobytes\"\n  }, {\n    \"name\": \"Megabits\",\n    \"id\": \"megabits\"\n  }, {\n    \"name\": \"Megabytes\",\n    \"id\": \"megabytes\"\n  }, {\n    \"name\": \"Gigabits\",\n    \"id\": \"gigabits\"\n  }, {\n    \"name\": \"Gigabytes\",\n    \"id\": \"gigabytes\"\n  }, {\n    \"name\": \"Terabits\",\n    \"id\": \"terabits\"\n  }, {\n    \"name\": \"Terabytes\",\n    \"id\": \"terabytes\"\n  }, {\n    \"name\": \"Petabits\",\n    \"id\": \"petabits\"\n  }, {\n    \"name\": \"Petabytes\",\n    \"id\": \"petabytes\"\n  }, {\n    \"name\": \"Exabits\",\n    \"id\": \"exabits\"\n  }, {\n    \"name\": \"Exabytes\",\n    \"id\": \"exabytes\"\n  }],\n  input_type: {\n    from: {\n      type: 'tel'\n    },\n    to: {\n      type: 'tel'\n    }\n  }\n}, {\n  id: \"energy\",\n  type: \"general\",\n  name: \"Energy\",\n  from: {\n    name: \"Btu (th)\",\n    id: \"btuTh\"\n  },\n  to: {\n    name: \"Btu (mean)\",\n    id: \"btuMean\"\n  },\n  units: [{\n    \"name\": \"Btu (th)\",\n    \"id\": \"btuTh\"\n  }, {\n    \"name\": \"Btu (mean)\",\n    \"id\": \"btuMean\"\n  }, {\n    \"name\": \"Calories (IT)\",\n    \"id\": \"caloriesIt\"\n  }, {\n    \"name\": \"Calories (th)\",\n    \"id\": \"caloriesTh\"\n  }, {\n    \"name\": \"Calories (mean)\",\n    \"id\": \"caloriesMean\"\n  }, {\n    \"name\": \"Calories (15C)\",\n    \"id\": \"calories15c\"\n  }, {\n    \"name\": \"Calories (20C)\",\n    \"id\": \"calories20c\"\n  }, {\n    \"name\": \"Calories (food)\",\n    \"id\": \"caloriesFood\"\n  }, {\n    \"name\": \"Centigrade Heat Units\",\n    \"id\": \"centigradeHeatUnits\"\n  }, {\n    \"name\": \"Electron Volts\",\n    \"id\": \"electronVolts\"\n  }, {\n    \"name\": \"Ergs\",\n    \"id\": \"ergs\"\n  }, {\n    \"name\": \"Foot-Pound Force\",\n    \"id\": \"footPoundForce\"\n  }, {\n    \"name\": \"Foot Poundals\",\n    \"id\": \"footPoundals\"\n  }, {\n    \"name\": \"Gigajoules\",\n    \"id\": \"gigajoules\"\n  }, {\n    \"name\": \"Horsepower Hours\",\n    \"id\": \"horsepowerHours\"\n  }, {\n    \"name\": \"Inch-Pound Force\",\n    \"id\": \"inchPoundForce\"\n  }, {\n    \"name\": \"Joules\",\n    \"id\": \"joules\"\n  }, {\n    \"name\": \"Kilocalories (IT)\",\n    \"id\": \"kilocaloriesIt\"\n  }, {\n    \"name\": \"Kilocalories (th)\",\n    \"id\": \"kilocaloriesTh\"\n  }, {\n    \"name\": \"Kilogram-Force Meters\",\n    \"id\": \"kilogramForceMeters\"\n  }, {\n    \"name\": \"Kilojoules\",\n    \"id\": \"kilojoules\"\n  }, {\n    \"name\": \"Kilowatt Hours\",\n    \"id\": \"kilowattHours\"\n  }, {\n    \"name\": \"Megajoules\",\n    \"id\": \"megajoules\"\n  }, {\n    \"name\": \"Newton Meters\",\n    \"id\": \"newtonMeters\"\n  }, {\n    \"name\": \"Therms\",\n    \"id\": \"therms\"\n  }, {\n    \"name\": \"Watt Seconds\",\n    \"id\": \"wattSeconds\"\n  }, {\n    \"name\": \"Watt Hours\",\n    \"id\": \"wattHours\"\n  }],\n  input_type: {\n    from: {\n      type: 'tel'\n    },\n    to: {\n      type: 'tel'\n    }\n  }\n}, {\n  id: \"power\",\n  type: \"general\",\n  name: \"Power\",\n  from: {\n    name: \"Watts\",\n    id: \"watts\"\n  },\n  to: {\n    name: \"Kilowatts\",\n    id: \"kilowatts\"\n  },\n  units: [{\n    \"name\": \"Watts\",\n    \"id\": \"watts\"\n  }, {\n    \"name\": \"Kilowatts\",\n    \"id\": \"kilowatts\"\n  }, {\n    \"name\": \"Megawatts\",\n    \"id\": \"megawatts\"\n  }, {\n    \"name\": \"Gigawatts\",\n    \"id\": \"gigawatts\"\n  }, {\n    \"name\": \"Btu\\/Hour\",\n    \"id\": \"btuHour\"\n  }, {\n    \"name\": \"Btu\\/Minute\",\n    \"id\": \"btuMinute\"\n  }, {\n    \"name\": \"Btu\\/Second\",\n    \"id\": \"btuSecond\"\n  }, {\n    \"name\": \"Calories(th)\\/Hour\",\n    \"id\": \"caloriesthHour\"\n  }, {\n    \"name\": \"Calories(th)\\/Minute\",\n    \"id\": \"caloriesthMinute\"\n  }, {\n    \"name\": \"Calories(th)\\/Second\",\n    \"id\": \"caloriesthSecond\"\n  }, {\n    \"name\": \"Kilocalories(th)\\/Hour\",\n    \"id\": \"kilocaloriesthHour\"\n  }, {\n    \"name\": \"Kilocalories(th)\\/Minute\",\n    \"id\": \"kilocaloriesthMinute\"\n  }, {\n    \"name\": \"Foot Pounds-Force\\/Minute\",\n    \"id\": \"footPoundsForceMinute\"\n  }, {\n    \"name\": \"Foot Pounds-Force\\/Second\",\n    \"id\": \"footPoundsForceSecond\"\n  }, {\n    \"name\": \"Horsepowers (electric)\",\n    \"id\": \"horsepowersElectric\"\n  }, {\n    \"name\": \"Horsepowers (international)\",\n    \"id\": \"horsepowersInternational\"\n  }, {\n    \"name\": \"Horsepowers (water)\",\n    \"id\": \"horsepowersWater\"\n  }, {\n    \"name\": \"Horsepowers (metric)\",\n    \"id\": \"horsepowersMetric\"\n  }, {\n    \"name\": \"Joules\\/Hour\",\n    \"id\": \"joulesHour\"\n  }, {\n    \"name\": \"Joules\\/Minute\",\n    \"id\": \"joulesMinute\"\n  }, {\n    \"name\": \"Joules\\/Second\",\n    \"id\": \"joulesSecond\"\n  }, {\n    \"name\": \"Kilogram-Force Meters\\/Hour\",\n    \"id\": \"kilogramForceMetersHour\"\n  }, {\n    \"name\": \"Kilogram-Force Meters\\/Minute\",\n    \"id\": \"kilogramForceMetersMinute\"\n  }],\n  input_type: {\n    from: {\n      type: 'tel'\n    },\n    to: {\n      type: 'tel'\n    }\n  }\n}, {\n  id: \"force\",\n  type: \"general\",\n  name: \"Force\",\n  from: {\n    name: \"Newtons\",\n    id: \"newtons\"\n  },\n  to: {\n    name: \"Kilonewtons\",\n    id: \"kilonewtons\"\n  },\n  units: [{\n    \"name\": \"Newtons\",\n    \"id\": \"newtons\"\n  }, {\n    \"name\": \"Kilonewtons\",\n    \"id\": \"kilonewtons\"\n  }, {\n    \"name\": \"Meganewtons\",\n    \"id\": \"meganewtons\"\n  }, {\n    \"name\": \"Dynes\",\n    \"id\": \"dynes\"\n  }, {\n    \"name\": \"Kilograms Force\",\n    \"id\": \"kilogramsForce\"\n  }, {\n    \"name\": \"Kips\",\n    \"id\": \"kips\"\n  }, {\n    \"name\": \"Pounds Force\",\n    \"id\": \"poundsForce\"\n  }, {\n    \"name\": \"Poundals\",\n    \"id\": \"poundals\"\n  }, {\n    \"name\": \"Sthenes (=kN)\",\n    \"id\": \"sthenes=kn\"\n  }, {\n    \"name\": \"Tonnes Force\",\n    \"id\": \"tonnesForce\"\n  }, {\n    \"name\": \"Tons Force (UK)\",\n    \"id\": \"tonsForceUk\"\n  }, {\n    \"name\": \"Tons Force (US)\",\n    \"id\": \"tonsForceUs\"\n  }],\n  input_type: {\n    from: {\n      type: 'tel'\n    },\n    to: {\n      type: 'tel'\n    }\n  }\n}, {\n  id: \"electric_current\",\n  type: \"general\",\n  name: \"Electric Current\",\n  from: {\n    name: \"Abampere\",\n    id: \"abampere\"\n  },\n  to: {\n    name: \"Ampere\",\n    id: \"ampere\"\n  },\n  units: [{\n    \"name\": \"Abampere\",\n    \"id\": \"abampere\"\n  }, {\n    \"name\": \"Ampere\",\n    \"id\": \"ampere\"\n  }, {\n    \"name\": \"Biot\",\n    \"id\": \"biot\"\n  }, {\n    \"name\": \"Centiampere\",\n    \"id\": \"centiampere\"\n  }, {\n    \"name\": \"Coulomb\\/Second\",\n    \"id\": \"coulombSecond\"\n  }, {\n    \"name\": \"EMU Of Current\",\n    \"id\": \"emuOfCurrent\"\n  }, {\n    \"name\": \"ESU Of Current\",\n    \"id\": \"esuOfCurrent\"\n  }, {\n    \"name\": \"Franklin\\/Second\",\n    \"id\": \"franklinSecond\"\n  }, {\n    \"name\": \"Gaussian Electric Current\",\n    \"id\": \"gaussianElectricCurrent\"\n  }, {\n    \"name\": \"Gigaampere\",\n    \"id\": \"gigaampere\"\n  }, {\n    \"name\": \"Gilbert\",\n    \"id\": \"gilbert\"\n  }, {\n    \"name\": \"Kiloampere\",\n    \"id\": \"kiloampere\"\n  }, {\n    \"name\": \"Megaampere\",\n    \"id\": \"megaampere\"\n  }, {\n    \"name\": \"Microampere\",\n    \"id\": \"microampere\"\n  }, {\n    \"name\": \"Milliampere\",\n    \"id\": \"milliampere\"\n  }, {\n    \"name\": \"Milliamp\",\n    \"id\": \"milliamp\"\n  }, {\n    \"name\": \"Manoampere\",\n    \"id\": \"manoampere\"\n  }, {\n    \"name\": \"Picoampere\",\n    \"id\": \"picoampere\"\n  }, {\n    \"name\": \"Siemens Volt\",\n    \"id\": \"siemensVolt\"\n  }, {\n    \"name\": \"Statampere\",\n    \"id\": \"statampere\"\n  }, {\n    \"name\": \"Teraampere\",\n    \"id\": \"teraampere\"\n  }, {\n    \"name\": \"Volt\\/Ohm\",\n    \"id\": \"voltOhm\"\n  }, {\n    \"name\": \"Watt\\/Volt\",\n    \"id\": \"wattVolt\"\n  }, {\n    \"name\": \"Weber\\/Henry\",\n    \"id\": \"weberHenry\"\n  }],\n  input_type: {\n    from: {\n      type: 'tel'\n    },\n    to: {\n      type: 'tel'\n    }\n  }\n}];\nexport async function getStaticPaths() {\n  const tools = [{\n    name: \"area\",\n    display: \"Area\",\n    id: 5,\n    type: \"conversions\",\n    category: \"conversion\"\n  }, {\n    name: \"force\",\n    display: \"Force\",\n    id: 6,\n    type: \"conversions\",\n    category: \"conversion\"\n  }, {\n    name: \"energy\",\n    display: \"Energy\",\n    id: 7,\n    type: \"conversions\",\n    category: \"conversion\"\n  }, {\n    name: \"fuel_consumption\",\n    display: \"Fuel Consumption\",\n    id: 8,\n    type: \"conversions\",\n    category: \"conversion\"\n  }, {\n    name: \"time\",\n    display: \"Time\",\n    id: 9,\n    type: \"conversions\",\n    category: \"conversion\"\n  }, {\n    name: \"mass\",\n    display: \"Mass\",\n    id: 10,\n    type: \"conversions\",\n    category: \"conversion\"\n  }, {\n    name: \"length\",\n    display: \"Length\",\n    id: 11,\n    type: \"conversions\",\n    category: \"conversion\"\n  }, {\n    name: \"digital_storage\",\n    display: \"Data Storage\",\n    id: 12,\n    type: \"conversions\",\n    category: \"conversion\"\n  }, {\n    name: \"temperature\",\n    display: \"Temperature\",\n    id: 16,\n    type: \"conversions\",\n    category: \"conversion\"\n  }, {\n    name: \"electric_current\",\n    display: \"Current\",\n    id: 18,\n    type: \"conversions\",\n    category: \"conversion\"\n  }, {\n    name: \"volume\",\n    display: \"Volume\",\n    id: 36,\n    type: \"conversions\",\n    category: \"conversion\"\n  }, {\n    name: \"pressure\",\n    display: \"Pressure\",\n    id: 37,\n    type: \"conversions\",\n    category: \"conversion\"\n  }, {\n    name: \"speed\",\n    display: \"Speed\",\n    id: 38,\n    type: \"conversions\",\n    category: \"conversion\"\n  }, {\n    name: \"power\",\n    display: \"Power\",\n    id: 39,\n    type: \"conversions\",\n    category: \"conversion\"\n  }, {\n    name: \"charge\",\n    display: \"Charge\",\n    id: 45,\n    type: \"conversions\",\n    category: \"conversion\"\n  }];\n  const paths = tools.map(post => ({\n    params: {\n      name: stringSpaceToHyphen(post.name)\n    }\n  }));\n  return {\n    paths: paths,\n    fallback: false // See the \"fallback\" section below\n\n  };\n}\nexport async function getStaticProps({\n  params\n}) {\n  // Pass post data to the page via props\n  return {\n    props: {\n      names: names,\n      toolType: toolType,\n      params: params\n    }\n  };\n}\nexport const capitalize = name => {\n  return name.charAt(0).toUpperCase() + name.slice(1);\n};","map":null,"metadata":{},"sourceType":"module"}