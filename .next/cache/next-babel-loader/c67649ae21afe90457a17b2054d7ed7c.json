{"ast":null,"code":"import \"antd/lib/layout/style\";\nimport _Layout from \"antd/lib/layout\";\nimport \"antd/lib/drawer/style\";\nimport _Drawer from \"antd/lib/drawer\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from 'next/router';\nimport dynamic from \"next/dynamic\";\nimport { names, toolType } from '../index';\nimport Head from 'next/head';\nimport { stringSpaceToHyphen } from '..';\nconst Navbar = dynamic(() => import('../Navbar'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('../Navbar')],\n    modules: ['../Navbar']\n  }\n});\nconst DrawerNav = dynamic(() => import('../DrawerNav'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('../DrawerNav')],\n    modules: ['../DrawerNav']\n  }\n});\nconst SideNav = dynamic(() => import('../SideNav'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('../SideNav')],\n    modules: ['../SideNav']\n  }\n});\nconst Functions = dynamic(() => import('../components/Functions'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('../components/Functions')],\n    modules: ['../components/Functions']\n  }\n});\nexport default function Mechanical({\n  params,\n  toolType,\n  names\n}) {\n  const router = useRouter();\n  const [visible, setVisible] = React.useState(false);\n\n  const showDrawer = () => {\n    if (window.innerWidth <= 700) setVisible(true);\n  };\n\n  const onClose = () => {\n    setVisible(false);\n  };\n\n  React.useEffect(() => {\n    if (window.innerWidth > 700) setVisible(false);\n  });\n  const [id, setId] = React.useState();\n  const [category, setCategory] = React.useState();\n  React.useEffect(() => {\n    if (router && router.query) {\n      names.map(item => {\n        if (stringSpaceToHyphen(item.display) === router.query.name) {\n          setId(item.id);\n          setCategory(item.category);\n          console.log(item.category);\n        }\n      });\n    }\n  }, [router, router.query]);\n  return __jsx(\"div\", null, __jsx(Head, null, __jsx(\"title\", null, router.query.name, \" Mechanical Tools\"), __jsx(\"link\", {\n    href: \"https://fonts.googleapis.com/icon?family=Material+Icons\",\n    rel: \"stylesheet\"\n  }), functions !== undefined && functions.map(item => stringSpaceToHyphen(item.display) === router.query.name && __jsx(\"meta\", {\n    key: \"description\",\n    name: \"description\",\n    content: item.desc\n  }))), __jsx(Navbar, {\n    showDrawer: showDrawer\n  }), __jsx(\"div\", {\n    className: \"tools-container\"\n  }, __jsx(_Drawer, {\n    width: 350,\n    title: \"gudofConvert\",\n    placement: \"left\",\n    closable: true,\n    onClose: onClose,\n    visible: visible\n  }, __jsx(DrawerNav, {\n    names: names,\n    toolType: toolType,\n    onClose: () => setVisible(false)\n  })), __jsx(\"div\", {\n    className: \"tools-left\"\n  }, __jsx(SideNav, {\n    names: names,\n    toolType: toolType,\n    key2: \"4\"\n  })), __jsx(_Layout, {\n    className: \"toolbox-layout\"\n  }, __jsx(Functions, {\n    id: id\n  }))));\n}\nexport async function getStaticPaths() {\n  const tools = [{\n    display: \"Belt Length\"\n  }, {\n    display: \"Gear Pump Displacement\"\n  }, {\n    display: \"Stroke's Law\"\n  }, {\n    display: \"Flow Velocity\"\n  }, {\n    display: \"Hooke's Law (Force)\"\n  }, {\n    display: \"Hooke's Law (Spring constant)\"\n  }, {\n    display: \"Strain\"\n  }, {\n    display: \"K Value & Pipe Length\"\n  }, {\n    display: \"Young's modulus\"\n  }, {\n    display: \"Weber Number\"\n  }, {\n    display: \"Chezy Coefficient\"\n  }, {\n    display: \"Cauchy Number\"\n  }, {\n    display: \"Bulk Modulus Elasticity\"\n  }];\n  const paths = tools.map(post => ({\n    params: {\n      name: stringSpaceToHyphen(post.display)\n    }\n  }));\n  return {\n    paths: paths,\n    fallback: false // See the \"fallback\" section below\n\n  };\n}\nexport async function getStaticProps({\n  params\n}) {\n  // params contains the post `id`.\n  // Pass post data to the page via props\n  return {\n    props: {\n      names: names,\n      toolType: toolType,\n      params: params\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}