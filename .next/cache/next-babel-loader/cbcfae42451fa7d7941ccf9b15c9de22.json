{"ast":null,"code":"import \"antd/lib/layout/style\";\nimport _Layout from \"antd/lib/layout\";\nimport \"antd/lib/drawer/style\";\nimport _Drawer from \"antd/lib/drawer\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from 'next/router';\nimport { names, toolType } from '../index';\nimport Navbar from '../Navbar';\nimport Head from 'next/head';\nimport SideNav from '../SideNav';\nimport DrawerNav from '../DrawerNav';\nimport { stringSpaceToHyphen } from '..';\nimport Slidertools from '../components/Slidertools';\nimport Zero from '../components/Zero';\nimport Functions from '../components/Functions';\nexport default function Instrumentation({\n  params,\n  functions,\n  toolType,\n  names\n}) {\n  const [visible, setVisible] = React.useState(false);\n\n  const showDrawer = () => {\n    if (window.innerWidth <= 700) setVisible(true);\n  };\n\n  const onClose = () => {\n    setVisible(false);\n  };\n\n  React.useEffect(() => {\n    if (window.innerWidth > 700) setVisible(false);\n  });\n  const [question, setQuestion] = React.useState();\n  const [result, setResult] = React.useState(0);\n  let vari;\n  const [queryid, setQueryId] = React.useState();\n  const router = useRouter();\n  const [a, seta] = React.useState();\n  const [b, setb] = React.useState();\n  React.useEffect(() => {\n    if (router && router.query) {\n      setQueryId(router.query.name);\n      console.log(\"router\", router.query.id);\n    }\n  }, [router, router.query]);\n  const [display, setDisplay] = React.useState();\n  const [name, setName] = React.useState();\n  const [category, setCategory] = React.useState();\n  const [id, setId] = React.useState();\n  React.useEffect(() => {\n    if (queryid !== undefined) {\n      let item = names.find(item => stringSpaceToHyphen(item.display) === router.query.name);\n      setCategory(item.category);\n\n      if (functions.find(item => stringSpaceToHyphen(item.display) === router.query.name) !== undefined) {\n        let vari = functions.find(item => stringSpaceToHyphen(item.display) === router.query.name);\n        seta(vari.a);\n        setQuestion(vari.a);\n        setName(vari.name);\n        setb(vari.b);\n        setDisplay(vari.display);\n      }\n\n      setId(item.id);\n      console.log(\"id\", id);\n    }\n  }, [queryid]);\n  return __jsx(\"div\", null, __jsx(Head, null, __jsx(\"title\", null, router.query.name, \" Instrumentation Tool\"), __jsx(\"link\", {\n    href: \"https://fonts.googleapis.com/icon?family=Material+Icons\",\n    rel: \"stylesheet\"\n  }), functions !== undefined && functions.map(item => stringSpaceToHyphen(item.display) === router.query.name && __jsx(\"meta\", {\n    key: \"description\",\n    name: \"description\",\n    content: item.desc\n  }))), __jsx(Navbar, {\n    showDrawer: showDrawer\n  }), __jsx(\"div\", {\n    className: \"tools-container\"\n  }, __jsx(_Drawer, {\n    width: 350,\n    title: \"gudofConvert\",\n    placement: \"left\",\n    closable: true,\n    onClose: onClose,\n    visible: visible\n  }, __jsx(DrawerNav, {\n    names: names,\n    toolType: toolType,\n    onClose: () => setVisible(false)\n  })), __jsx(\"div\", {\n    className: \"tools-left\"\n  }, __jsx(SideNav, {\n    names: names,\n    toolType: toolType,\n    key2: \"1\"\n  })), __jsx(_Layout, {\n    className: \"toolbox-layout\"\n  }, question !== undefined && category === \"instrumentation\" && __jsx(Slidertools, {\n    desc: \"\",\n    display: display,\n    a: a,\n    b: b,\n    res: result,\n    qn: question,\n    name: name\n  }), category === \"electrical\" && __jsx(Functions, {\n    id: id\n  }), category === \"zero\" && __jsx(Zero, null))));\n}\nexport async function getStaticPaths() {\n  const tools = [{\n    display: \"3-15 PSI\"\n  }, {\n    display: \"0-20 mA\"\n  }, {\n    display: \"4-20 mA\"\n  }, {\n    display: \"0-25 mA\"\n  }, {\n    display: \"0-X to % (Conversion)\"\n  }, {\n    display: \"Resistance (from temperature)\"\n  }, {\n    display: \"Linear mA to Square Root mA\"\n  }, {\n    display: \"Temperature (from resistance)\"\n  }, {\n    display: \"Temperature\"\n  }, {\n    display: \"Linear to Square Root percentage\"\n  }, {\n    display: \"Level measurement Two Seals\"\n  }, {\n    display: \"Level measurement one seal above\"\n  }, {\n    display: \"Level measurement one seal below\"\n  }, {\n    display: \"Bubble Level\"\n  }, {\n    display: \"Bubble Interface\"\n  }, {\n    display: \"Two Seal Interface\"\n  }, {\n    display: \"Open Tank\"\n  }, {\n    display: \"Interface Wet Leg\"\n  }, {\n    display: \"Liquid Purge\"\n  }, {\n    display: \"Level Transmission Closed Vessel\"\n  }, {\n    display: \"Flow Rate Calculation\"\n  }, {\n    display: \"Hydrostatic Level\"\n  }, {\n    display: \"Orifice Plate error\"\n  }];\n  const paths = tools !== undefined && tools.map(post => ({\n    params: {\n      name: stringSpaceToHyphen(post.display)\n    }\n  }));\n  return {\n    paths: paths,\n    fallback: false // See the \"fallback\" section below\n\n  };\n}\nexport async function getStaticProps({\n  params\n}) {\n  // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n  const res = [{\n    stringId: \"1\",\n    a: 0,\n    b: 20,\n    name: \"mA\",\n    display: \"0-20 mA\",\n    desc: \"This measurement to current converter tool will convert any linear input measurement reading into the ideal current output signal over a linear range of 0 to 20 milliamps, and display a 0-20mA conversion scale for the chosen measurement range.\"\n  }, {\n    stringId: \"2\",\n    a: 4,\n    b: 20,\n    name: \"mA\",\n    display: \"4-20 mA\",\n    desc: \"This measurement to current converter tool will convert any linear input measurement reading into the ideal current output signal over a linear range of 4 to 20 milliamps, and display a 4-20mA conversion scale for the chosen measurement range.\"\n  }, {\n    stringId: \"3\",\n    a: 0,\n    b: 25,\n    name: \"mA\",\n    display: \"0-25 mA\",\n    desc: \"This measurement to current converter tool will convert any linear input measurement reading into the ideal current output signal over a linear range of 0 to 25 milliamps, and display a 0-25mA conversion scale for the chosen measurement range.\"\n  }, {\n    stringId: \"0\",\n    a: 3,\n    b: 15,\n    name: \"PSI\",\n    display: \"3-15 PSI\",\n    desc: \"This measurement to current converter tool will convert any linear input measurement reading into the ideal current output signal over a linear range of 0 to 20 milliamps, and display a 0-20mA conversion scale for the chosen measurement range.\"\n  }]; // Pass post data to the page via props\n\n  return {\n    props: {\n      functions: res,\n      names: names,\n      toolType: toolType,\n      params: params\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}